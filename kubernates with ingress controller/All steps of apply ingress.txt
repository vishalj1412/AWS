what is ingress=>ingress is API Object which provide external access to service.

What is Ingress?
Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource.

Here is a simple example where an Ingress sends all its traffic to one Service:


cluster
Ingress-managed
load balancer
routing rule
Ingress
Pod
Service
Pod
client

--------------------------deploy application steps---------------------------

1) create domain on freenom
2) add this domain on rout53 on aws
3) copy namespace from rout53 and add it on domain on freenom


C:\Users\HP>aws configure
AWS Access Key ID [None]: 
AWS Secret Access Key [None]: 
Default region name [us-east-2]:
Default output format [yaml]:


------------for create cluster we write chcluster.yaml file and run following command---------- 

C:\Users\HP>nano chcluster.yaml
Error in /etc/nanorc on line 237: Error expanding /usr/share/nano/*.nanorc: No such file or directory

C:\Users\HP>eksctl create cluster -f chcluster.yaml
2022-03-21 15:46:18 [ℹ]  eksctl version 0.88.0
2022-03-21 15:46:18 [ℹ]  using region us-east-2
2022-03-21 15:46:19 [ℹ]  setting availability zones to [us-east-2c us-east-2a us-east-2b]
2022-03-21 15:46:19 [ℹ]  subnets for us-east-2c - public:192.168.0.0/19 private:192.168.96.0/19
2022-03-21 15:46:19 [ℹ]  subnets for us-east-2a - public:192.168.32.0/19 private:192.168.128.0/19
2022-03-21 15:46:19 [ℹ]  subnets for us-east-2b - public:192.168.64.0/19 private:192.168.160.0/19
2022-03-21 15:46:20 [ℹ]  nodegroup "node-ing" will use "ami-0656dd273bd6e9a2f" [AmazonLinux2/1.21]
2022-03-21 15:46:21 [ℹ]  using Kubernetes version 1.21
2022-03-21 15:46:21 [ℹ]  creating EKS cluster "chatapp-cluster" in "us-east-2" region with un-managed nodes
2022-03-21 15:46:21 [ℹ]  1 nodegroup (node-ing) was included (based on the include/exclude rules)
2022-03-21 15:46:21 [ℹ]  will create a CloudFormation stack for cluster itself and 1 nodegroup stack(s)
2022-03-21 15:46:21 [ℹ]  will create a CloudFormation stack for cluster itself and 0 managed nodegroup stack(s)
2022-03-21 15:46:21 [ℹ]  if you encounter any issues, check CloudFormation console or try 'eksctl utils describe-stacks --region=us-east-2 --cluster=chatapp-cluster'
2022-03-21 15:46:21 [ℹ]  Kubernetes API endpoint access will use default of {publicAccess=true, privateAccess=false} for cluster "chatapp-cluster" in "us-east-2"
2022-03-21 15:46:21 [ℹ]  CloudWatch logging will not be enabled for cluster "chatapp-cluster" in "us-east-2"
2022-03-21 15:46:21 [ℹ]  you can enable it with 'eksctl utils update-cluster-logging --enable-types={SPECIFY-YOUR-LOG-TYPES-HERE (e.g. all)} --region=us-east-2 --cluster=chatapp-cluster'
2022-03-21 15:46:21 [ℹ]
2 sequential tasks: { create cluster control plane "chatapp-cluster",
    2 sequential sub-tasks: {
        wait for control plane to become ready,
        create nodegroup "node-ing",
    }
}
2022-03-21 15:46:21 [ℹ]  building cluster stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:46:22 [ℹ]  deploying stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:46:52 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:47:23 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:48:25 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:49:26 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:50:27 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:51:28 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:52:29 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:53:30 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:54:32 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:55:33 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:56:34 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:57:35 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 15:58:36 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-cluster"
2022-03-21 16:00:45 [ℹ]  building nodegroup stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:00:45 [ℹ]  --nodes-min=2 was set automatically for nodegroup node-ing
2022-03-21 16:00:45 [ℹ]  --nodes-max=2 was set automatically for nodegroup node-ing
2022-03-21 16:00:47 [ℹ]  deploying stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:00:47 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:01:07 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:01:26 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:01:47 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:02:05 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:02:22 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:02:41 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:03:00 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:03:20 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:03:38 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:03:55 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:04:16 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-nodegroup-node-ing"
2022-03-21 16:04:18 [ℹ]  waiting for the control plane availability...
2022-03-21 16:04:18 [✔]  saved kubeconfig as "C:\\Users\\HP\\.kube\\config"
2022-03-21 16:04:18 [ℹ]  no tasks
2022-03-21 16:04:18 [✔]  all EKS cluster resources for "chatapp-cluster" have been created
2022-03-21 16:04:20 [ℹ]  adding identity "arn:aws:iam::262016213464:role/eksctl-chatapp-cluster-nodegroup-NodeInstanceRole-1VDGPUI4EVPRS" to auth ConfigMap
2022-03-21 16:04:21 [ℹ]  nodegroup "node-ing" has 0 node(s)
2022-03-21 16:04:21 [ℹ]  waiting for at least 2 node(s) to become ready in "node-ing"
2022-03-21 16:05:05 [ℹ]  nodegroup "node-ing" has 2 node(s)
2022-03-21 16:05:05 [ℹ]  node "ip-192-168-15-96.us-east-2.compute.internal" is ready
2022-03-21 16:05:05 [ℹ]  node "ip-192-168-66-54.us-east-2.compute.internal" is ready
2022-03-21 16:05:23 [ℹ]  kubectl command should work with "C:\\Users\\HP\\.kube\\config", try 'kubectl get nodes'
2022-03-21 16:05:23 [✔]  EKS cluster "chatapp-cluster" in "us-east-2" region is ready






C:\Users\HP>eksctl utils describe-stacks --region=us-east-2 --cluster=chatapp-cluster
2022-03-21 16:11:30 [ℹ]  eksctl version 0.88.0
2022-03-21 16:11:30 [ℹ]  using region us-east-2
2022-03-21 16:11:33 [ℹ]  stack/eksctl-chatapp-cluster-nodegroup-node-ing = {
  Capabilities: ["CAPABILITY_IAM"],
  CreationTime: 2022-03-21 10:30:47.844 +0000 UTC,
  Description: "EKS nodes (AMI family: AmazonLinux2, SSH access: false, private networking: false) [created and managed by eksctl]",
  DisableRollback: false,
  DriftInformation: {
    StackDriftStatus: "NOT_CHECKED"
  },
  EnableTerminationProtection: false,
  Outputs: [
    {
      OutputKey: "FeaturePrivateNetworking",
      OutputValue: "false"
    },
    {
      ExportName: "eksctl-chatapp-cluster-nodegroup-node-ing::InstanceRoleARN",
      OutputKey: "InstanceRoleARN",
      OutputValue: "arn:aws:iam::262016213464:role/eksctl-chatapp-cluster-nodegroup-NodeInstanceRole-1VDGPUI4EVPRS"
    },
    {
      OutputKey: "FeatureLocalSecurityGroup",
      OutputValue: "true"
    },
    {
      ExportName: "eksctl-chatapp-cluster-nodegroup-node-ing::InstanceProfileARN",
      OutputKey: "InstanceProfileARN",
      OutputValue: "arn:aws:iam::262016213464:instance-profile/eksctl-chatapp-cluster-nodegroup-node-ing-NodeInstanceProfile-SNL1P40VPWA"
    },
    {
      OutputKey: "FeatureSharedSecurityGroup",
      OutputValue: "true"
    }
  ],
  RollbackConfiguration: {

  },
  StackId: "arn:aws:cloudformation:us-east-2:262016213464:stack/eksctl-chatapp-cluster-nodegroup-node-ing/f8ec7430-a901-11ec-a73a-0a9ade6ea3c4",
  StackName: "eksctl-chatapp-cluster-nodegroup-node-ing",
  StackStatus: "CREATE_COMPLETE",
  Tags: [
    {
      Key: "alpha.eksctl.io/cluster-name",
      Value: "chatapp-cluster"
    },
    {
      Key: "alpha.eksctl.io/nodegroup-name",
      Value: "node-ing"
    },
    {
      Key: "eksctl.cluster.k8s.io/v1alpha1/cluster-name",
      Value: "chatapp-cluster"
    },
    {
      Key: "alpha.eksctl.io/nodegroup-type",
      Value: "unmanaged"
    },
    {
      Key: "alpha.eksctl.io/eksctl-version",
      Value: "0.88.0"
    },
    {
      Key: "eksctl.io/v1alpha2/nodegroup-name",
      Value: "node-ing"
    }
  ]
}
2022-03-21 16:11:33 [ℹ]  stack/eksctl-chatapp-cluster-cluster = {
  Capabilities: ["CAPABILITY_IAM"],
  CreationTime: 2022-03-21 10:16:23.444 +0000 UTC,
  Description: "EKS cluster (dedicated VPC: true, dedicated IAM: true) [created and managed by eksctl]",
  DisableRollback: false,
  DriftInformation: {
    StackDriftStatus: "NOT_CHECKED"
  },
  EnableTerminationProtection: false,
  Outputs: [
    {
      ExportName: "eksctl-chatapp-cluster-cluster::SubnetsPrivate",
      OutputKey: "SubnetsPrivate",
      OutputValue: "subnet-08a2b1bbf8c52105a,subnet-0bbdb7d0007c78cf5,subnet-0a4e8359fffbddd7a"
    },
    {
      ExportName: "eksctl-chatapp-cluster-cluster::SubnetsPublic",
      OutputKey: "SubnetsPublic",
      OutputValue: "subnet-0a76ddbf9dbbd1ed8,subnet-0cd2a643f3564f613,subnet-0e96dcfff14c4ff82"
    },
    {
      OutputKey: "FeatureNATMode",
      OutputValue: "Single"
    },
    {
      ExportName: "eksctl-chatapp-cluster-cluster::ServiceRoleARN",
      OutputKey: "ServiceRoleARN",
      OutputValue: "arn:aws:iam::262016213464:role/eksctl-chatapp-cluster-cluster-ServiceRole-1RGUS8ACSU0M4"
    },
    {
      ExportName: "eksctl-chatapp-cluster-cluster::Endpoint",
      OutputKey: "Endpoint",
      OutputValue: "https://81FE6F22D3EA67C62F9D8A5F512B6AAC.gr7.us-east-2.eks.amazonaws.com"
    },
    {
      ExportName: "eksctl-chatapp-cluster-cluster::SharedNodeSecurityGroup",
      OutputKey: "SharedNodeSecurityGroup",
      OutputValue: "sg-0dd5e8ba896713f21"
    },
    {
      ExportName: "eksctl-chatapp-cluster-cluster::VPC",
      OutputKey: "VPC",
      OutputValue: "vpc-0a80cf29b65353fd8"
    },
    {
      ExportName: "eksctl-chatapp-cluster-cluster::ClusterSecurityGroupId",
      OutputKey: "ClusterSecurityGroupId",
      OutputValue: "sg-0b3213b4c1e1e0ab9"
    },
    {
      OutputKey: "ClusterStackName",
      OutputValue: "eksctl-chatapp-cluster-cluster"
    },
    {
      OutputKey: "CertificateAuthorityData",
      OutputValue: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM1ekNDQWMrZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJeU1ETXlNVEV3TWpNd05sb1hEVE15TURNeE9ERXdNak13Tmxvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUd3CnJWZTYrTENxQWtHQ3psM3pRbVZCOUpmQzNMczlPQ3AvS0RaQUdBenN5U3diYW1keS9sU3ZEbmw1WmY2Y0xjNzQKSEdNVkpvZVUrQTg0MmFheHIrbkhHSlh0VEhlYkhuRWNoa0hrSmtXN3hkRm1PMzBwejJoTzFkSDNkei9ZUUVsQQo0U2J2djNrODdUcDFBdUNkSTliVloyK0psTFFVNzJjYkJQSXFadG80dFpmQlJwWVl5ZUR3dFVwQjhuWEtaQ21rCmVaQlNOdCtGSlJyZXpGaU02RmVoSDBNblMvU05yVGFEZzl2M3NrZHorYWVIa1hueGFVYk4vMmYxTVNzTnFyMFIKZ1YyUWowTFRsczUvV3gwdEdDcEJQWjUrNkZ4ZkxJTXlNU1lyKzA0UWVQeGloSkdRUzQ0WFBQTHlMODFoR2xITgpCSzY4MjV6S29VT2g5a1h2RnJVQ0F3RUFBYU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZMRCs1WG9Sc3BYbGgrenJsQ1JydXpMZW9sTEZNQTBHQ1NxR1NJYjMKRFFFQkN3VUFBNElCQVFCU2pLRXp1MWEycWpYYmhZNFR3WkFOZHZUV29MbnB6aEc1UEU0dk8rU0NiUTRXUk9BdgpHNHlrUzFhSG03S2Z3aVUxdzVxMmlIaUdPMkJMeXBZSG50NUZBYlpGRUIreGhMa3NEMTNxZjZTRk5OWTJQeUNaCk81M1kwb1JxblpxdnU5bWl6eitPRjZzeTdmLzBJZEk2cCtxRkZoMjZWSG5VVm9OTjN3cDRHRUpmUDVkV0xUM20KejgrUVRnOXJIdEw4OGVxeldDdCsraGQzSkJRaEZ4U1RROGlVeWtRSUZ0a29uNk5lcXNJL1ZHOGlFMGV1ZkFMMgpYRkVTRlNpbzJsRjkxR2psL1NleWkwT3lNOUM3dkY1VlV1Unk4aHh5TlM2WVUyMktBcnJzTmRDQXd3QkN3Wm9GClcxVjJTQStiVW9LdjhMakdPYzlqU2pGdlFhM0Q5bmtUQmVaZgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
    },
    {
      ExportName: "eksctl-chatapp-cluster-cluster::SecurityGroup",
      OutputKey: "SecurityGroup",
      OutputValue: "sg-09ae6b8e3045c7cdc"
    },
    {
      ExportName: "eksctl-chatapp-cluster-cluster::ARN",
      OutputKey: "ARN",
      OutputValue: "arn:aws:eks:us-east-2:262016213464:cluster/chatapp-cluster"
    }
  ],
  RollbackConfiguration: {

  },
  StackId: "arn:aws:cloudformation:us-east-2:262016213464:stack/eksctl-chatapp-cluster-cluster/f5b269c0-a8ff-11ec-8fba-0ae460785718",
  StackName: "eksctl-chatapp-cluster-cluster",
  StackStatus: "CREATE_COMPLETE",
  Tags: [{
      Key: "alpha.eksctl.io/cluster-name",
      Value: "chatapp-cluster"
    },{
      Key: "eksctl.cluster.k8s.io/v1alpha1/cluster-name",
      Value: "chatapp-cluster"
    },{
      Key: "alpha.eksctl.io/eksctl-version",
      Value: "0.88.0"
    }]
}







C:\Users\HP>aws sts get-caller-identity
Account: '262016213464'
Arn: arn:aws:iam::262016213464:user/eks-user
UserId: AIDAT2ALCEHMDBSIMLIK4





C:\Users\HP>eksctl utils write-kubeconfig --cluster=chatapp-cluster --set-kubeconfig-context=true
2022-03-21 17:09:51 [ℹ]  eksctl version 0.88.0
2022-03-21 17:09:51 [ℹ]  using region us-east-2
2022-03-21 17:09:53 [✔]  saved kubeconfig as "C:\\Users\\HP\\.kube\\config"



C:\Users\HP>eksctl utils associate-iam-oidc-provider --cluster=chatapp-cluster --approve
2022-03-21 17:10:33 [ℹ]  eksctl version 0.88.0
2022-03-21 17:10:33 [ℹ]  using region us-east-2
2022-03-21 17:10:36 [ℹ]  will create IAM Open ID Connect provider for cluster "chatapp-cluster" in "us-east-2"
2022-03-21 17:10:38 [✔]  created IAM Open ID Connect provider for cluster "chatapp-cluster" in "us-east-2"


C:\Users\HP>kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.4/docs/examples/rbac-role.yaml
clusterrole.rbac.authorization.k8s.io/alb-ingress-controller created
clusterrolebinding.rbac.authorization.k8s.io/alb-ingress-controller created
serviceaccount/alb-ingress-controller created






C:\Users\HP>curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.2.0/docs/install/iam_policy.json
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  7273  100  7273    0     0  27648      0 --:--:-- --:--:-- --:--:-- 27759

C:\Users\HP>aws iam create-policy --policy-name AWSLoadBalancerControllerIAMPolicy --policy-document file://iam_policy.json
Policy:
  Arn: arn:aws:iam::262016213464:policy/AWSLoadBalancerControllerIAMPolicy
  AttachmentCount: 0
  CreateDate: '2022-03-21T11:47:52+00:00'
  DefaultVersionId: v1
  IsAttachable: true
  Path: /
  PermissionsBoundaryUsageCount: 0
  PolicyId: ANPAT2ALCEHMKEB7QYIV4
  PolicyName: AWSLoadBalancerControllerIAMPolicy
  UpdateDate: '2022-03-21T11:47:52+00:00'


C:\Users\HP>eksctl create iamserviceaccount --cluster=chatapp-cluster --namespace=kube-system --name=aws-load-balancer-controller --attach-policy-arn=arn:aws:iam::262016213464:policy/AWSLoadBalancerControllerIAMPolicy --override-existing-serviceaccounts --approve
2022-03-21 17:26:35 [ℹ]  eksctl version 0.88.0
2022-03-21 17:26:35 [ℹ]  using region us-east-2
2022-03-21 17:26:40 [ℹ]  1 iamserviceaccount (kube-system/aws-load-balancer-controller) was included (based on the include/exclude rules)
2022-03-21 17:26:40 [!]  metadata of serviceaccounts that exist in Kubernetes will be updated, as --override-existing-serviceaccounts was set
2022-03-21 17:26:40 [ℹ]  1 task: {
    2 sequential sub-tasks: {
        create IAM role for serviceaccount "kube-system/aws-load-balancer-controller",
        create serviceaccount "kube-system/aws-load-balancer-controller",
    } }2022-03-21 17:26:40 [ℹ]  building iamserviceaccount stack "eksctl-chatapp-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2022-03-21 17:26:40 [ℹ]  deploying stack "eksctl-chatapp-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2022-03-21 17:26:40 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2022-03-21 17:27:00 [ℹ]  waiting for CloudFormation stack "eksctl-chatapp-cluster-addon-iamserviceaccount-kube-system-aws-load-balancer-controller"
2022-03-21 17:27:03 [ℹ]  created serviceaccount "kube-system/aws-load-balancer-controller"






C:\Users\HP>kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.1.1/cert-manager.yaml
customresourcedefinition.apiextensions.k8s.io/certificaterequests.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/certificates.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/challenges.acme.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/clusterissuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/issuers.cert-manager.io created
customresourcedefinition.apiextensions.k8s.io/orders.acme.cert-manager.io created
namespace/cert-manager created
serviceaccount/cert-manager-cainjector created
serviceaccount/cert-manager created
serviceaccount/cert-manager-webhook created
clusterrole.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrole.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
clusterrole.rbac.authorization.k8s.io/cert-manager-view created
clusterrole.rbac.authorization.k8s.io/cert-manager-edit created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-cainjector created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-issuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-clusterissuers created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-certificates created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-orders created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-challenges created
clusterrolebinding.rbac.authorization.k8s.io/cert-manager-controller-ingress-shim created
role.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
role.rbac.authorization.k8s.io/cert-manager:leaderelection created
role.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
rolebinding.rbac.authorization.k8s.io/cert-manager-cainjector:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager:leaderelection created
rolebinding.rbac.authorization.k8s.io/cert-manager-webhook:dynamic-serving created
service/cert-manager created
service/cert-manager-webhook created
deployment.apps/cert-manager-cainjector created
deployment.apps/cert-manager created
deployment.apps/cert-manager-webhook created
mutatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created
validatingwebhookconfiguration.admissionregistration.k8s.io/cert-manager-webhook created

C:\Users\HP>kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
customresourcedefinition.apiextensions.k8s.io/ingressclassparams.elbv2.k8s.aws created
customresourcedefinition.apiextensions.k8s.io/targetgroupbindings.elbv2.k8s.aws created



C:\Users\HP>kubectl apply -k "github.com/aws/eks-charts/stable/aws-load-balancer-controller//crds?ref=master"
customresourcedefinition.apiextensions.k8s.io/ingressclassparams.elbv2.k8s.aws configured
customresourcedefinition.apiextensions.k8s.io/targetgroupbindings.elbv2.k8s.aws configured

C:\Users\HP>curl -Lo v2_4_1_full.yaml https://github.com/kubernetes-sigs/aws-load-balancer-controller/releases/download/v2.4.1/v2_4_1_full.yaml
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   653  100   653    0     0    772      0 --:--:-- --:--:-- --:--:--   773
100 34368  100 34368    0     0  18771      0  0:00:01  0:00:01 --:--:--  883k


------above command download v2_4_1_full.yaml file open that file and add your cluster name in that-------


C:\Users\HP>kubectl apply -f v2_4_1_full.yaml
customresourcedefinition.apiextensions.k8s.io/ingressclassparams.elbv2.k8s.aws configured
customresourcedefinition.apiextensions.k8s.io/targetgroupbindings.elbv2.k8s.aws configured
Warning: resource serviceaccounts/aws-load-balancer-controller is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.
serviceaccount/aws-load-balancer-controller configured
role.rbac.authorization.k8s.io/aws-load-balancer-controller-leader-election-role created
clusterrole.rbac.authorization.k8s.io/aws-load-balancer-controller-role created
rolebinding.rbac.authorization.k8s.io/aws-load-balancer-controller-leader-election-rolebinding created
clusterrolebinding.rbac.authorization.k8s.io/aws-load-balancer-controller-rolebinding created
service/aws-load-balancer-webhook-service created
deployment.apps/aws-load-balancer-controller created
certificate.cert-manager.io/aws-load-balancer-serving-cert created
issuer.cert-manager.io/aws-load-balancer-selfsigned-issuer created
mutatingwebhookconfiguration.admissionregistration.k8s.io/aws-load-balancer-webhook created
validatingwebhookconfiguration.admissionregistration.k8s.io/aws-load-balancer-webhook created
ingressclassparams.elbv2.k8s.aws/alb created
ingressclass.networking.k8s.io/alb created



C:\Users\HP>nano ingress.yaml
Error in /etc/nanorc on line 237: Error expanding /usr/share/nano/*.nanorc: No such file or directory

C:\Users\HP>kubectl create namespace application
namespace/application created

C:\Users\HP>kubectl apply -f db-secret.yaml -f db-deployment.yaml -f db-service.yaml -n application
secret/db-secret created
deployment.apps/db created
service/db-service created

C:\Users\HP>nano chatappbackend.yaml
Error in /etc/nanorc on line 237: Error expanding /usr/share/nano/*.nanorc: No such file or directory

C:\Users\HP>nano backendservice.yaml
Error in /etc/nanorc on line 237: Error expanding /usr/share/nano/*.nanorc: No such file or directory


C:\Users\HP>kubectl apply -f app-configmap.yaml -f backendsecret.yaml -f chatappbackend.yaml -f backendservice.yaml -n application
configmap/app-configmap created
secret/app-secret created
deployment.apps/app1 created
service/backendapp created

C:\Users\HP>kubectl get pods -n application
NAME                    READY   STATUS    RESTARTS   AGE
app1-6b664dc6cb-hm4s5   1/1     Running   0          7m54s
app1-6b664dc6cb-nr6ln   1/1     Running   0          7m54s
db-5696c95474-qjhgz     1/1     Running   0          12m

C:\Users\HP>kubectl get svc -n application
NAME         TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
backendapp   NodePort    10.100.4.123    <none>        8000:31083/TCP   8m57s
db-service   ClusterIP   10.100.179.67   <none>        3306/TCP         13m

---------------write ingress.yaml and run it-----------------

C:\Users\HP>kubectl apply -f ingress.yaml
ingress.networking.k8s.io/app-ingress created


C:\Users\HP>kubectl get all -n kube-system
NAME                                                READY   STATUS    RESTARTS   AGE
pod/aws-load-balancer-controller-6dcfdcf589-vlc2r   1/1     Running   0          24m
pod/aws-node-9qgxd                                  1/1     Running   0          136m
pod/aws-node-zq6ns                                  1/1     Running   0          136m
pod/coredns-f47955f89-gbhss                         1/1     Running   0          146m
pod/coredns-f47955f89-mg2tc                         1/1     Running   0          146m
pod/kube-proxy-76565                                1/1     Running   0          136m
pod/kube-proxy-cn7h5                                1/1     Running   0          136m

NAME                                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE
service/aws-load-balancer-webhook-service   ClusterIP   10.100.32.228   <none>        443/TCP         24m
service/kube-dns                            ClusterIP   10.100.0.10     <none>        53/UDP,53/TCP   146m

NAME                        DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR   AGE
daemonset.apps/aws-node     2         2         2       2            2           <none>          146m
daemonset.apps/kube-proxy   2         2         2       2            2           <none>          146m

NAME                                           READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/aws-load-balancer-controller   1/1     1            1           24m
deployment.apps/coredns                        2/2     2            2           146m

NAME                                                      DESIRED   CURRENT   READY   AGE
replicaset.apps/aws-load-balancer-controller-6dcfdcf589   1         1         1       24m
replicaset.apps/coredns-f47955f89                         2         2         2       146m




C:\Users\HP>kubectl logs pod/aws-load-balancer-controller-6dcfdcf589-vlc2r -n application
Error from server (NotFound): pods "aws-load-balancer-controller-6dcfdcf589-vlc2r" not found

C:\Users\HP>kubectl logs pod/aws-load-balancer-controller-6dcfdcf589-vlc2r -n kube-system
{"level":"info","ts":1647865597.0711875,"msg":"version","GitVersion":"v2.4.1","GitCommit":"c4471defda10f8184173192b9f9df4e411ee5dac","BuildDate":"2022-03-16T16:10:01+0000"}
{"level":"info","ts":1647865597.1802046,"logger":"controller-runtime.metrics","msg":"metrics server is starting to listen","addr":":8080"}
{"level":"info","ts":1647865597.1846533,"logger":"setup","msg":"adding health check for controller"}
{"level":"info","ts":1647865597.184861,"logger":"controller-runtime.webhook","msg":"registering webhook","path":"/mutate-v1-pod"}
{"level":"info","ts":1647865597.1850634,"logger":"controller-runtime.webhook","msg":"registering webhook","path":"/mutate-elbv2-k8s-aws-v1beta1-targetgroupbinding"}
{"level":"info","ts":1647865597.1852782,"logger":"controller-runtime.webhook","msg":"registering webhook","path":"/validate-elbv2-k8s-aws-v1beta1-targetgroupbinding"}
{"level":"info","ts":1647865597.185476,"logger":"controller-runtime.webhook","msg":"registering webhook","path":"/validate-networking-v1-ingress"}
{"level":"info","ts":1647865597.1856503,"logger":"setup","msg":"starting podInfo repo"}
I0321 12:26:39.185841       1 leaderelection.go:243] attempting to acquire leader lease kube-system/aws-load-balancer-controller-leader...
{"level":"info","ts":1647865599.1861608,"logger":"controller-runtime.manager","msg":"starting metrics server","path":"/metrics"}
{"level":"info","ts":1647865599.1862702,"logger":"controller-runtime.webhook.webhooks","msg":"starting webhook server"}
{"level":"info","ts":1647865599.1865377,"logger":"controller-runtime.certwatcher","msg":"Updated current TLS certificate"}
{"level":"info","ts":1647865599.186605,"logger":"controller-runtime.webhook","msg":"serving webhook server","host":"","port":9443}
{"level":"info","ts":1647865599.1904924,"logger":"controller-runtime.certwatcher","msg":"Starting certificate watcher"}
I0321 12:26:39.209997       1 leaderelection.go:253] successfully acquired lease kube-system/aws-load-balancer-controller-leader
{"level":"info","ts":1647865599.2878318,"logger":"controller-runtime.manager.controller.targetGroupBinding","msg":"Starting EventSource","reconciler group":"elbv2.k8s.aws","reconciler kind":"TargetGroupBinding","source":"kind source: /, Kind="}
{"level":"info","ts":1647865599.287872,"logger":"controller-runtime.manager.controller.targetGroupBinding","msg":"Starting EventSource","reconciler group":"elbv2.k8s.aws","reconciler kind":"TargetGroupBinding","source":"kind source: /, Kind="}
{"level":"info","ts":1647865599.2878797,"logger":"controller-runtime.manager.controller.targetGroupBinding","msg":"Starting EventSource","reconciler group":"elbv2.k8s.aws","reconciler kind":"TargetGroupBinding","source":"kind source: /, Kind="}
{"level":"info","ts":1647865599.2878864,"logger":"controller-runtime.manager.controller.targetGroupBinding","msg":"Starting EventSource","reconciler group":"elbv2.k8s.aws","reconciler kind":"TargetGroupBinding","source":"kind source: /, Kind="}
{"level":"info","ts":1647865599.2878945,"logger":"controller-runtime.manager.controller.targetGroupBinding","msg":"Starting Controller","reconciler group":"elbv2.k8s.aws","reconciler kind":"TargetGroupBinding"}
{"level":"info","ts":1647865599.2881522,"logger":"controller-runtime.manager.controller.ingress","msg":"Starting EventSource","source":"channel source: 0xc00008d9a0"}
{"level":"info","ts":1647865599.2882097,"logger":"controller-runtime.manager.controller.ingress","msg":"Starting EventSource","source":"channel source: 0xc00008d9f0"}
{"level":"info","ts":1647865599.2882226,"logger":"controller-runtime.manager.controller.ingress","msg":"Starting EventSource","source":"kind source: /, Kind="}
{"level":"info","ts":1647865599.288231,"logger":"controller-runtime.manager.controller.ingress","msg":"Starting EventSource","source":"kind source: /, Kind="}
{"level":"info","ts":1647865599.2882545,"logger":"controller-runtime.manager.controller.ingress","msg":"Starting EventSource","source":"channel source: 0xc00008da40"}
{"level":"info","ts":1647865599.2882676,"logger":"controller-runtime.manager.controller.ingress","msg":"Starting EventSource","source":"channel source: 0xc00008dd10"}
{"level":"info","ts":1647865599.2883022,"logger":"controller-runtime.manager.controller.ingress","msg":"Starting EventSource","source":"kind source: /, Kind="}
{"level":"info","ts":1647865599.2883105,"logger":"controller-runtime.manager.controller.ingress","msg":"Starting EventSource","source":"kind source: /, Kind="}
{"level":"info","ts":1647865599.288318,"logger":"controller-runtime.manager.controller.ingress","msg":"Starting Controller"}
{"level":"info","ts":1647865599.2884312,"logger":"controller-runtime.manager.controller.service","msg":"Starting EventSource","source":"kind source: /, Kind="}
{"level":"info","ts":1647865599.2884507,"logger":"controller-runtime.manager.controller.service","msg":"Starting Controller"}
{"level":"info","ts":1647865599.3886259,"logger":"controller-runtime.manager.controller.service","msg":"Starting workers","worker count":3}
{"level":"info","ts":1647865599.3888083,"logger":"controller-runtime.manager.controller.targetGroupBinding","msg":"Starting workers","reconciler group":"elbv2.k8s.aws","reconciler kind":"TargetGroupBinding","worker count":3}
{"level":"info","ts":1647865599.3900976,"logger":"controller-runtime.manager.controller.ingress","msg":"Starting workers","worker count":3}
{"level":"info","ts":1647866956.0431998,"logger":"backend-sg-provider","msg":"creating securityGroup","name":"k8s-traffic-chatappcluster-466e5751df"}
{"level":"info","ts":1647866956.289688,"logger":"controllers.ingress","msg":"Auto Create SG","LB SGs":[{"$ref":"#/resources/AWS::EC2::SecurityGroup/ManagedLBSecurityGroup/status/groupID"},"sg-0f50d019d0226f47c"],"backend SG":"sg-0f50d019d0226f47c"}
{"level":"info","ts":1647866956.2915695,"logger":"controllers.ingress","msg":"successfully built model","model":"{\"id\":\"application/app-ingress\",\"resources\":{\"AWS::EC2::SecurityGroup\":{\"ManagedLBSecurityGroup\":{\"spec\":{\"groupName\":\"k8s-applicat-appingre-e633e0030d\",\"description\":\"[k8s] Managed SecurityGroup for LoadBalancer\",\"ingress\":[{\"ipProtocol\":\"tcp\",\"fromPort\":80,\"toPort\":80,\"ipRanges\":[{\"cidrIP\":\"0.0.0.0/0\"}]}]}}},\"AWS::ElasticLoadBalancingV2::Listener\":{\"80\":{\"spec\":{\"loadBalancerARN\":{\"$ref\":\"#/resources/AWS::ElasticLoadBalancingV2::LoadBalancer/LoadBalancer/status/loadBalancerARN\"},\"port\":80,\"protocol\":\"HTTP\",\"defaultActions\":[{\"type\":\"fixed-response\",\"fixedResponseConfig\":{\"contentType\":\"text/plain\",\"statusCode\":\"404\"}}]}}},\"AWS::ElasticLoadBalancingV2::ListenerRule\":{\"80:1\":{\"spec\":{\"listenerARN\":{\"$ref\":\"#/resources/AWS::ElasticLoadBalancingV2::Listener/80/status/listenerARN\"},\"priority\":1,\"actions\":[{\"type\":\"forward\",\"forwardConfig\":{\"targetGroups\":[{\"targetGroupARN\":{\"$ref\":\"#/resources/AWS::ElasticLoadBalancingV2::TargetGroup/application/app-ingress-backendapp:8000/status/targetGroupARN\"}}]}}],\"conditions\":[{\"field\":\"host-header\",\"hostHeaderConfig\":{\"values\":[\"vishalchatapp.ml\"]}},{\"field\":\"path-pattern\",\"pathPatternConfig\":{\"values\":[\"/*\"]}}]}}},\"AWS::ElasticLoadBalancingV2::LoadBalancer\":{\"LoadBalancer\":{\"spec\":{\"name\":\"k8s-applicat-appingre-85c8236858\",\"type\":\"application\",\"scheme\":\"internet-facing\",\"ipAddressType\":\"ipv4\",\"subnetMapping\":[{\"subnetID\":\"subnet-0a76ddbf9dbbd1ed8\"},{\"subnetID\":\"subnet-0cd2a643f3564f613\"},{\"subnetID\":\"subnet-0e96dcfff14c4ff82\"}],\"securityGroups\":[{\"$ref\":\"#/resources/AWS::EC2::SecurityGroup/ManagedLBSecurityGroup/status/groupID\"},\"sg-0f50d019d0226f47c\"]}}},\"AWS::ElasticLoadBalancingV2::TargetGroup\":{\"application/app-ingress-backendapp:8000\":{\"spec\":{\"name\":\"k8s-applicat-backenda-b582f96b5c\",\"targetType\":\"instance\",\"port\":31083,\"protocol\":\"HTTP\",\"protocolVersion\":\"HTTP1\",\"ipAddressType\":\"ipv4\",\"healthCheckConfig\":{\"port\":\"traffic-port\",\"protocol\":\"HTTP\",\"path\":\"/\",\"matcher\":{\"httpCode\":\"200\"},\"intervalSeconds\":15,\"timeoutSeconds\":5,\"healthyThresholdCount\":2,\"unhealthyThresholdCount\":2}}}},\"K8S::ElasticLoadBalancingV2::TargetGroupBinding\":{\"application/app-ingress-backendapp:8000\":{\"spec\":{\"template\":{\"metadata\":{\"name\":\"k8s-applicat-backenda-b582f96b5c\",\"namespace\":\"application\",\"creationTimestamp\":null},\"spec\":{\"targetGroupARN\":{\"$ref\":\"#/resources/AWS::ElasticLoadBalancingV2::TargetGroup/application/app-ingress-backendapp:8000/status/targetGroupARN\"},\"targetType\":\"instance\",\"serviceRef\":{\"name\":\"backendapp\",\"port\":8000},\"networking\":{\"ingress\":[{\"from\":[{\"securityGroup\":{\"groupID\":\"sg-0f50d019d0226f47c\"}}],\"ports\":[{\"protocol\":\"TCP\",\"port\":31083}]}]},\"ipAddressType\":\"ipv4\"}}}}}}}"}
{"level":"info","ts":1647866956.5532222,"logger":"controllers.ingress","msg":"creating securityGroup","resourceID":"ManagedLBSecurityGroup"}
{"level":"info","ts":1647866956.8124607,"logger":"controllers.ingress","msg":"created securityGroup","resourceID":"ManagedLBSecurityGroup","securityGroupID":"sg-0abe10b8a4df999bd"}
{"level":"error","ts":1647866956.9377372,"logger":"controller-runtime.manager.controller.ingress","msg":"Reconciler error","name":"app-ingress","namespace":"application","error":"InvalidGroup.NotFound: The security group 'sg-0abe10b8a4df999bd' does not exist\n\tstatus code: 400, request id: cbbdc739-e12f-4bda-9952-216a49228a5c"}
{"level":"info","ts":1647866957.0719695,"logger":"controllers.ingress","msg":"Auto Create SG","LB SGs":[{"$ref":"#/resources/AWS::EC2::SecurityGroup/ManagedLBSecurityGroup/status/groupID"},"sg-0f50d019d0226f47c"],"backend SG":"sg-0f50d019d0226f47c"}
{"level":"info","ts":1647866957.072605,"logger":"controllers.ingress","msg":"successfully built model","model":"{\"id\":\"application/app-ingress\",\"resources\":{\"AWS::EC2::SecurityGroup\":{\"ManagedLBSecurityGroup\":{\"spec\":{\"groupName\":\"k8s-applicat-appingre-e633e0030d\",\"description\":\"[k8s] Managed SecurityGroup for LoadBalancer\",\"ingress\":[{\"ipProtocol\":\"tcp\",\"fromPort\":80,\"toPort\":80,\"ipRanges\":[{\"cidrIP\":\"0.0.0.0/0\"}]}]}}},\"AWS::ElasticLoadBalancingV2::Listener\":{\"80\":{\"spec\":{\"loadBalancerARN\":{\"$ref\":\"#/resources/AWS::ElasticLoadBalancingV2::LoadBalancer/LoadBalancer/status/loadBalancerARN\"},\"port\":80,\"protocol\":\"HTTP\",\"defaultActions\":[{\"type\":\"fixed-response\",\"fixedResponseConfig\":{\"contentType\":\"text/plain\",\"statusCode\":\"404\"}}]}}},\"AWS::ElasticLoadBalancingV2::ListenerRule\":{\"80:1\":{\"spec\":{\"listenerARN\":{\"$ref\":\"#/resources/AWS::ElasticLoadBalancingV2::Listener/80/status/listenerARN\"},\"priority\":1,\"actions\":[{\"type\":\"forward\",\"forwardConfig\":{\"targetGroups\":[{\"targetGroupARN\":{\"$ref\":\"#/resources/AWS::ElasticLoadBalancingV2::TargetGroup/application/app-ingress-backendapp:8000/status/targetGroupARN\"}}]}}],\"conditions\":[{\"field\":\"host-header\",\"hostHeaderConfig\":{\"values\":[\"vishalchatapp.ml\"]}},{\"field\":\"path-pattern\",\"pathPatternConfig\":{\"values\":[\"/*\"]}}]}}},\"AWS::ElasticLoadBalancingV2::LoadBalancer\":{\"LoadBalancer\":{\"spec\":{\"name\":\"k8s-applicat-appingre-85c8236858\",\"type\":\"application\",\"scheme\":\"internet-facing\",\"ipAddressType\":\"ipv4\",\"subnetMapping\":[{\"subnetID\":\"subnet-0a76ddbf9dbbd1ed8\"},{\"subnetID\":\"subnet-0cd2a643f3564f613\"},{\"subnetID\":\"subnet-0e96dcfff14c4ff82\"}],\"securityGroups\":[{\"$ref\":\"#/resources/AWS::EC2::SecurityGroup/ManagedLBSecurityGroup/status/groupID\"},\"sg-0f50d019d0226f47c\"]}}},\"AWS::ElasticLoadBalancingV2::TargetGroup\":{\"application/app-ingress-backendapp:8000\":{\"spec\":{\"name\":\"k8s-applicat-backenda-b582f96b5c\",\"targetType\":\"instance\",\"port\":31083,\"protocol\":\"HTTP\",\"protocolVersion\":\"HTTP1\",\"ipAddressType\":\"ipv4\",\"healthCheckConfig\":{\"port\":\"traffic-port\",\"protocol\":\"HTTP\",\"path\":\"/\",\"matcher\":{\"httpCode\":\"200\"},\"intervalSeconds\":15,\"timeoutSeconds\":5,\"healthyThresholdCount\":2,\"unhealthyThresholdCount\":2}}}},\"K8S::ElasticLoadBalancingV2::TargetGroupBinding\":{\"application/app-ingress-backendapp:8000\":{\"spec\":{\"template\":{\"metadata\":{\"name\":\"k8s-applicat-backenda-b582f96b5c\",\"namespace\":\"application\",\"creationTimestamp\":null},\"spec\":{\"targetGroupARN\":{\"$ref\":\"#/resources/AWS::ElasticLoadBalancingV2::TargetGroup/application/app-ingress-backendapp:8000/status/targetGroupARN\"},\"targetType\":\"instance\",\"serviceRef\":{\"name\":\"backendapp\",\"port\":8000},\"networking\":{\"ingress\":[{\"from\":[{\"securityGroup\":{\"groupID\":\"sg-0f50d019d0226f47c\"}}],\"ports\":[{\"protocol\":\"TCP\",\"port\":31083}]}]},\"ipAddressType\":\"ipv4\"}}}}}}}"}
{"level":"info","ts":1647866957.1940045,"msg":"authorizing securityGroup ingress","securityGroupID":"sg-0abe10b8a4df999bd","permission":[{"FromPort":80,"IpProtocol":"tcp","IpRanges":[{"CidrIp":"0.0.0.0/0","Description":""}],"Ipv6Ranges":null,"PrefixListIds":null,"ToPort":80,"UserIdGroupPairs":null}]}
{"level":"info","ts":1647866957.366305,"msg":"authorized securityGroup ingress","securityGroupID":"sg-0abe10b8a4df999bd"}
{"level":"info","ts":1647866957.3940923,"logger":"controllers.ingress","msg":"creating targetGroup","stackID":"application/app-ingress","resourceID":"application/app-ingress-backendapp:8000"}
{"level":"info","ts":1647866957.6352065,"logger":"controllers.ingress","msg":"created targetGroup","stackID":"application/app-ingress","resourceID":"application/app-ingress-backendapp:8000","arn":"arn:aws:elasticloadbalancing:us-east-2:262016213464:targetgroup/k8s-applicat-backenda-b582f96b5c/14be98d8b4b276f0"}
{"level":"info","ts":1647866957.6706574,"logger":"controllers.ingress","msg":"creating loadBalancer","stackID":"application/app-ingress","resourceID":"LoadBalancer"}
{"level":"info","ts":1647866958.0504868,"logger":"controllers.ingress","msg":"created loadBalancer","stackID":"application/app-ingress","resourceID":"LoadBalancer","arn":"arn:aws:elasticloadbalancing:us-east-2:262016213464:loadbalancer/app/k8s-applicat-appingre-85c8236858/4dc31b1afbd9ca62"}
{"level":"info","ts":1647866958.0797102,"logger":"controllers.ingress","msg":"creating listener","stackID":"application/app-ingress","resourceID":"80"}
{"level":"info","ts":1647866958.1379745,"logger":"controllers.ingress","msg":"created listener","stackID":"application/app-ingress","resourceID":"80","arn":"arn:aws:elasticloadbalancing:us-east-2:262016213464:listener/app/k8s-applicat-appingre-85c8236858/4dc31b1afbd9ca62/01ddff95c2146776"}
{"level":"info","ts":1647866958.1693816,"logger":"controllers.ingress","msg":"creating listener rule","stackID":"application/app-ingress","resourceID":"80:1"}
{"level":"info","ts":1647866958.2422051,"logger":"controllers.ingress","msg":"created listener rule","stackID":"application/app-ingress","resourceID":"80:1","arn":"arn:aws:elasticloadbalancing:us-east-2:262016213464:listener-rule/app/k8s-applicat-appingre-85c8236858/4dc31b1afbd9ca62/01ddff95c2146776/459f9d4d9fabe335"}
{"level":"info","ts":1647866958.2423184,"logger":"controllers.ingress","msg":"creating targetGroupBinding","stackID":"application/app-ingress","resourceID":"application/app-ingress-backendapp:8000"}
{"level":"info","ts":1647866958.2968583,"logger":"controllers.ingress","msg":"created targetGroupBinding","stackID":"application/app-ingress","resourceID":"application/app-ingress-backendapp:8000","targetGroupBinding":{"namespace":"application","name":"k8s-applicat-backenda-b582f96b5c"}}
{"level":"info","ts":1647866958.393756,"logger":"controllers.ingress","msg":"successfully deployed model","ingressGroup":"application/app-ingress"}
{"level":"info","ts":1647866958.4861078,"msg":"authorizing securityGroup ingress","securityGroupID":"sg-0345fa1f8c8712440","permission":[{"FromPort":31083,"IpProtocol":"tcp","IpRanges":null,"Ipv6Ranges":null,"PrefixListIds":null,"ToPort":31083,"UserIdGroupPairs":[{"Description":"elbv2.k8s.aws/targetGroupBinding=shared","GroupId":"sg-0f50d019d0226f47c","GroupName":null,"PeeringStatus":null,"UserId":null,"VpcId":null,"VpcPeeringConnectionId":null}]}]}
{"level":"info","ts":1647866958.6926267,"msg":"authorized securityGroup ingress","securityGroupID":"sg-0345fa1f8c8712440"}
{"level":"info","ts":1647866958.850962,"msg":"registering targets","arn":"arn:aws:elasticloadbalancing:us-east-2:262016213464:targetgroup/k8s-applicat-backenda-b582f96b5c/14be98d8b4b276f0","targets":[{"AvailabilityZone":null,"Id":"i-0d10f35f96d09ad62","Port":31083},{"AvailabilityZone":null,"Id":"i-0e48bcd55ea957979","Port":31083}]}
{"level":"info","ts":1647866958.9832852,"msg":"registered targets","arn":"arn:aws:elasticloadbalancing:us-east-2:262016213464:targetgroup/k8s-applicat-backenda-b582f96b5c/14be98d8b4b276f0"}



C:\Users\HP>kubectl get ingress -n application
NAME          CLASS   HOSTS              ADDRESS                                                                  PORTS   AGE
app-ingress   alb     vishalchatapp.ml   k8s-applicat-appingre-85c8236858-781937599.us-east-2.elb.amazonaws.com   80      7m









-------------------------------------------------------

then create record=>

1.go to rout53
2.create record
3.enable the alies
4. select classic load balancer
5. copy domain name of SOA and browse it
